# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java Build with Maven

on:
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Set environment variables
      run: |
        echo "SMTP_PWD=${{ secrets.SMTP_PWD }}" >> $GITHUB_ENV
        echo "SMTP_USRNME=${{ secrets.SMTP_USRNME }}" >> $GITHUB_ENV
        echo "DB_URL=${{ secrets.DB_URL }}" >> $GITHUB_ENV
        echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> $GITHUB_ENV
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
    - name: Build with Maven
      run: mvn clean package
    - name: Setup PEM File
      run: |
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > key.pem
        chmod 600 key.pem
    - name: Transfer the jar file to server
      env:
        USERNAME: ${{ secrets.SSH_USERNAME }}
        SERVER: ${{ secrets.SSH_SERVER }}
      run: |
        scp -i key.pem -o StrictHostKeyChecking=no target/crm-new.jar $USERNAME@$SERVER:/home/ubuntu/crm-deploy
    - name: Run application
      env:
        USERNAME: ${{ secrets.SSH_USERNAME }}
        SERVER: ${{ secrets.SSH_SERVER }}
      run: |
        scp -i key.pem -o StrictHostKeyChecking=no $USERNAME@$SERVER 'nohup java -Xms256m -Xmx1024m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/home/ubuntu/crm-deploy -jar /home/ubuntu/crm-deploy/crm-new.jar > /home/ubuntu/crm-deploy/crm-new.log 2>&1 &'
